name: Attach artifacts on release

# on:
#   workflow_dispatch:
#   release:
#     types: [published]

on:
  pull_request:
    branches: *

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        runs-on: [ubuntu-22.04]
    runs-on: ${{ matrix.runs-on }}
    name: Build
    steps:
      - name: Set up Go 1.20.7
        uses: actions/setup-go@v3
        with:
          go-version: 1.20.7
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}/cmd/mx-scenario-go && go build .
      - name: Package
        run: |
          export GO_PKG_MVX=/go/pkg/mod/github.com/multiversx/
          export CMD_DIR=${GITHUB_WORKSPACE}/cmd/mx-scenario-go
          export GO_MOD_PATH=${GITHUB_WORKSPACE}/mx-scenario-go/go.mod

          cd ${GITHUB_WORKSPACE}

          if [[ "$GOOS" == linux && "$GOARCH" == amd64 ]]; then
            cp $GO_PKG_MVX/$(cat $GO_MOD_PATH/go.mod | grep mx-chain-vm-go | sort -n | tail -n -1| awk -F '/' '{print$3}'| sed 's/ /@/g')/wasmer2/libvmexeccapi.so $CMD_DIR/libvmexeccapi.so
          fi
          if [[ "$GOOS" == darwin && "$GOARCH" == amd64 ]]; then
            cp $GO_PKG_MVX/$(cat $GO_MOD_PATH/go.mod | grep mx-chain-vm-go | sort -n | tail -n -1| awk -F '/' '{print$3}'| sed 's/ /@/g')/wasmer2/libvmexeccapi.so $CMD_DIR/libvmexeccapi.dylib
          fi

          #cd ${BUILD_DIR}
          #zip "${GITHUB_WORKSPACE}/${ARCHIVE}" *
          #stat ${GITHUB_WORKSPACE}/${ARCHIVE}

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mx-scenario-go.zip
          path:  ${GITHUB_WORKSPACE}/cmd/mx-scenario-go
          if-no-files-found: error

      # - name: Upload artifacts to release, edit release notes
      #   if: ${{ inputs.attach_to_existing_release == true || inputs.create_release == true }}
      #   run: |
      #     gh release edit ${{ github.ref_name }} --notes-file=release_notes.txt

      #     gh release upload ${{ github.ref_name }} $(find /home/runner/work/output-from-docker/**/*.wasm -type f)
      #     gh release upload ${{ github.ref_name }} $(find /home/runner/work/output-from-docker/**/*.source.json -type f)
      #     gh release upload ${{ github.ref_name }} $(find /home/runner/work/output-from-docker/**/*.abi.json -type f)
      #     gh release upload ${{ github.ref_name }} $(find /home/runner/work/output-from-docker/artifacts.json -type f)
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
