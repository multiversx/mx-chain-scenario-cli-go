name: Attach artifacts on release

on:
  workflow_dispatch:
  release:
    types: [published]
  pull_request:
    branches: ["cli"]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        runs-on: [ubuntu-22.04, macos-11.0]
    runs-on: ${{ matrix.runs-on }}
    name: Build
    steps:
      - name: Set up Go 1.20.7
        uses: actions/setup-go@v3
        with:
          go-version: 1.20.7
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi


      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - name: Set environment variables
        run: |
          GOOS=$(go env GOOS)
          GOARCH=$(go env GOARCH)
          GOPATH=$(go env GOPATH)

          BUILD_DIR=${GITHUB_WORKSPACE}/build
          ARCHIVE="mx_scenario_go""_""$GOOS""_""$GOARCH"".zip"
          
          VM_GO_VERSION=$(cat go.mod | grep mx-chain-vm-go | sort -n | tail -n -1| awk -F '/' '{print$3}'| sed 's/ /@/g')
          VM_GO_DIR=${GOPATH}/pkg/mod/github.com/multiversx/${VM_GO_VERSION}

          echo "GOOS=${GOOS}" >> $GITHUB_ENV
          echo "GOARCH=${GOARCH}" >> $GITHUB_ENV
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          echo "ARCHIVE=${ARCHIVE}" >> $GITHUB_ENV
          echo "VM_GO_DIR=${VM_GO_DIR}" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir -p ${BUILD_DIR}
          cd ${GITHUB_WORKSPACE}/cmd/mx-scenario-go && go build -o "${BUILD_DIR}/mx-scenario-go"
      
      - name: Package
        run: |
          if [[ "$GOOS" == linux && "$GOARCH" == amd64 ]]; then
            cp --verbose ${VM_GO_DIR}/wasmer2/libvmexeccapi.so ${BUILD_DIR}/libvmexeccapi.so
          fi
          if [[ "$GOOS" == darwin && "$GOARCH" == amd64 ]]; then
            cp -v ${VM_GO_DIR}/wasmer2/libvmexeccapi.so ${BUILD_DIR}/libvmexeccapi.dylib
          fi

          ls -al ${BUILD_DIR}
          zip -r ${ARCHIVE} ${BUILD_DIR}

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path:  ${{ env.ARCHIVE }}
          if-no-files-found: error

      - name: Upload artifacts to release
        if: ${{ github.event_name == 'release' }}
        run: |
          gh release upload ${{ github.ref_name }} ${{ env.ARCHIVE}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
